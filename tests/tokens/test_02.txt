Token{lexeme: 'extern', position: {(3, 1) -> (3, 6)}, type: EXTERN}
Token{lexeme: 'exit', position: {(3, 8) -> (3, 11)}, type: IDENT}
Token{lexeme: '(', position: {(3, 12) -> (3, 12)}, type: OPEN_BRACKET}
Token{lexeme: 'i64', position: {(3, 13) -> (3, 15)}, type: TYPE}
Token{lexeme: ')', position: {(3, 16) -> (3, 16)}, type: CLOSE_BRACKET}
Token{lexeme: 'void', position: {(3, 18) -> (3, 21)}, type: TYPE}
Token{lexeme: ';', position: {(3, 22) -> (3, 22)}, type: SEMICOLON}
Token{lexeme: 'fn', position: {(5, 1) -> (5, 2)}, type: FN}
Token{lexeme: 'main', position: {(5, 4) -> (5, 7)}, type: IDENT}
Token{lexeme: '(', position: {(5, 8) -> (5, 8)}, type: OPEN_BRACKET}
Token{lexeme: ')', position: {(5, 9) -> (5, 9)}, type: CLOSE_BRACKET}
Token{lexeme: 'void', position: {(5, 11) -> (5, 14)}, type: TYPE}
Token{lexeme: '{', position: {(5, 16) -> (5, 16)}, type: OPEN_CURLY}
Token{lexeme: 'let', position: {(6, 5) -> (6, 7)}, type: LET}
Token{lexeme: 'x', position: {(6, 9) -> (6, 9)}, type: IDENT}
Token{lexeme: '=', position: {(6, 11) -> (6, 11)}, type: ASSIGN}
Token{lexeme: '21', position: {(6, 13) -> (6, 14)}, type: INTEGER}
Token{lexeme: ';', position: {(6, 15) -> (6, 15)}, type: SEMICOLON}
Token{lexeme: 'let', position: {(7, 5) -> (7, 7)}, type: LET}
Token{lexeme: 'y', position: {(7, 9) -> (7, 9)}, type: IDENT}
Token{lexeme: '=', position: {(7, 11) -> (7, 11)}, type: ASSIGN}
Token{lexeme: 'hello, world!
	', position: {(7, 17) -> (7, 31)}, type: STRING_LITERAL}
Token{lexeme: ';', position: {(7, 32) -> (7, 32)}, type: SEMICOLON}
Token{lexeme: 'if', position: {(8, 5) -> (8, 6)}, type: IF}
Token{lexeme: 'true', position: {(8, 8) -> (8, 11)}, type: TRUE}
Token{lexeme: '&&', position: {(8, 13) -> (8, 14)}, type: LOGICAL_AND}
Token{lexeme: 'false', position: {(8, 16) -> (8, 20)}, type: FALSE}
Token{lexeme: '{', position: {(8, 22) -> (8, 22)}, type: OPEN_CURLY}
Token{lexeme: 'exit', position: {(9, 9) -> (9, 12)}, type: IDENT}
Token{lexeme: '(', position: {(9, 13) -> (9, 13)}, type: OPEN_BRACKET}
Token{lexeme: '0', position: {(9, 14) -> (9, 14)}, type: INTEGER}
Token{lexeme: ')', position: {(9, 15) -> (9, 15)}, type: CLOSE_BRACKET}
Token{lexeme: ';', position: {(9, 16) -> (9, 16)}, type: SEMICOLON}
Token{lexeme: '}', position: {(10, 5) -> (10, 5)}, type: CLOSE_CURLY}
Token{lexeme: 'else if', position: {(10, 7) -> (10, 13)}, type: ELSE_IF}
Token{lexeme: '(', position: {(10, 15) -> (10, 15)}, type: OPEN_BRACKET}
Token{lexeme: '21', position: {(10, 16) -> (10, 17)}, type: INTEGER}
Token{lexeme: 'as', position: {(10, 19) -> (10, 20)}, type: AS}
Token{lexeme: 'i8', position: {(10, 22) -> (10, 23)}, type: TYPE}
Token{lexeme: '==', position: {(10, 26) -> (10, 26)}, type: EQUAL}
Token{lexeme: '19', position: {(10, 28) -> (10, 29)}, type: INTEGER}
Token{lexeme: '+', position: {(10, 31) -> (10, 31)}, type: PLUS}
Token{lexeme: '2', position: {(10, 33) -> (10, 33)}, type: INTEGER}
Token{lexeme: ')', position: {(10, 34) -> (10, 34)}, type: CLOSE_BRACKET}
Token{lexeme: '{', position: {(10, 36) -> (10, 36)}, type: OPEN_CURLY}
Token{lexeme: 'exit', position: {(11, 9) -> (11, 12)}, type: IDENT}
Token{lexeme: '(', position: {(11, 13) -> (11, 13)}, type: OPEN_BRACKET}
Token{lexeme: '1', position: {(11, 14) -> (11, 14)}, type: INTEGER}
Token{lexeme: ')', position: {(11, 15) -> (11, 15)}, type: CLOSE_BRACKET}
Token{lexeme: ';', position: {(11, 16) -> (11, 16)}, type: SEMICOLON}
Token{lexeme: '}', position: {(12, 5) -> (12, 5)}, type: CLOSE_CURLY}
Token{lexeme: 'else', position: {(12, 7) -> (12, 10)}, type: ELSE}
Token{lexeme: '{', position: {(12, 12) -> (12, 12)}, type: OPEN_CURLY}
Token{lexeme: 'exit', position: {(13, 9) -> (13, 12)}, type: IDENT}
Token{lexeme: '(', position: {(13, 13) -> (13, 13)}, type: OPEN_BRACKET}
Token{lexeme: '2', position: {(13, 14) -> (13, 14)}, type: INTEGER}
Token{lexeme: ')', position: {(13, 15) -> (13, 15)}, type: CLOSE_BRACKET}
Token{lexeme: ';', position: {(13, 16) -> (13, 16)}, type: SEMICOLON}
Token{lexeme: '}', position: {(14, 5) -> (14, 5)}, type: CLOSE_CURLY}
Token{lexeme: '}', position: {(16, 1) -> (16, 1)}, type: CLOSE_CURLY}
